import java.io.*;
import java.util.*;
import java.net.*;
import java.util.Scanner;
import java.awt.*;
import java.awt.desktop.UserSessionEvent;
import java.awt.event.*;
import javax.swing.*;
import java.util.StringTokenizer;

public class ChatFrame extends JFrame {
	Socket socket = null;
	String msg=null;
	ArrayList<String> users = new ArrayList<>();
	users.add(0,"현재 접속 중");
	
	OutputStream outStream = null;
	DataOutputStream dataOutStream = null;
	InputStream inStream = null;
	DataInputStream dataInStream = null;

	JPanel Panel = new JPanel(new BorderLayout());
	JPanel btnPanel = new JPanel(new BorderLayout());
	JPanel listPanel = new JPanel();
	JTextArea recv = new JTextArea(7, 20);
	JTextField send = new JTextField(20);
	JButton sendBtn = new JButton("send");
	JScrollPane sp = new JScrollPane(recv);
	JList userList = new JList(users.toArray());
	
	
	String chatTag = "CHAT";
	
	

	ChatFrame(Socket _s) {
		socket = _s;
				
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setTitle("채팅창");

		setContentPane(Panel);
		MyActionListener mal = new MyActionListener();

		Panel.add(sp, BorderLayout.CENTER);
		Panel.add(btnPanel, BorderLayout.SOUTH);
		Panel.add(listPanel, BorderLayout.EAST);
		
		listPanel.add(new JScrollPane(userList));

		recv.setLineWrap(true);
		recv.setWrapStyleWord(true);
		recv.setEditable(false);

		btnPanel.add(send, BorderLayout.CENTER);
		btnPanel.add(sendBtn, BorderLayout.EAST);

		recv.setPreferredSize(new Dimension(300, 200));
		send.setPreferredSize(new Dimension(250, 50));
		sendBtn.setPreferredSize(new Dimension(50, 40));
		listPanel.setPreferredSize(new Dimension(50,200));

		sendBtn.addActionListener(mal);

		setSize(400, 350);
		setResizable(false);
		
		Dimension frameSize = this.getSize(); // 프레임 사이즈를 가져오기
		Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize(); //모니터 크기 가져오는 코드 
		this.setLocation((screenSize.width - frameSize.width) / 2, (screenSize.height - frameSize.height) / 2);
	}
	
	class MyActionListener implements ActionListener {
		public void actionPerformed(ActionEvent e) {
			JButton b = (JButton) e.getSource();
			
			if(b.getText().equals("send")) {
				msg=chatTag+"!"+send.getText();
				
				sendChat(socket, msg);
				send.setText("");
			}
		}
	}
	void sendChat (Socket _s, String _m) {
		Socket socket = _s;
		String msg = _m;
		
		try {
			OutputStream outStream = socket.getOutputStream();
			DataOutputStream dataOutStream = new DataOutputStream(outStream);
			
			dataOutStream.writeUTF(msg);
		}catch(Exception e) {
			System.out.println("Client > 채팅 메세지 전송 오류 ");
			System.out.println(e.toString());
		}
	}
	void readChat(String _m){
		String msg = _m;
		StringTokenizer st = new StringTokenizer(msg,"!");
		String tag = st.nextToken();
		String message = st.nextToken();
		
		recv.append(message+"\n");
	}
	
	void showUsers(String _s) {
		String user = _s;
		users.add(user);
	}
	
	void removeUsers(String _s) {
		String user = _s;
		for(int i=0;i<users.size();i++){
			if(user.equals(users.get(i))) {
				users.remove(user);
			}
		}
	}
}

